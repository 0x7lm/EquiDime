{
  "contracts": {
    "lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol": {
      "ReentrancyAttack": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              }
            ],
            "name": "callSender",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol\":\"ReentrancyAttack\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.8/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol\":{\"keccak256\":\"0x06694958456703a9b581f69b8fe9901224d1761f2c773730b5852f15aabb92ca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8d3b1e5fdc512f0d3f4e606b374d072b1d1658172dfecbe47096560e0abf362b\",\"dweb:/ipfs/QmWDdTu6zMEnR7vdSP4FboPxt1jeDCmY3Peb3TjdnRaJ2D\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
          "solc_version": "0.8.23",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"ReentrancyAttack.sol:ReentrancyAttack\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tand\t@CPI0_2[0], r2, r2\n\tsub.s!\t@CPI0_3[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_4[0], r2, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r2, r4\n\tsub!\tr4, r3, r4\n\tjump.ge\t@.BB0_2\n\tadd\t4, r2, r5\n\tptr.add\tr1, r5, r4\n\tld\tr4, r4\n\tsub.s!\t@CPI0_4[0], r4, r6\n\tjump.gt\t@.BB0_2\n\tadd\tr2, r4, r2\n\tadd\t36, r2, r2\n\tsub!\tr2, r3, r2\n\tjump.gt\t@.BB0_2\n\tadd\t32, r5, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_32\n\tadd\tr0, r0, r7\n.BB0_14:\n\tshl.s\t5, r7, r8\n\tptr.add\tr2, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_14\n.BB0_32:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_16\n\tshl.s\t5, r6, r6\n\tptr.add\tr2, r6, r2\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr2, r2\n\tsub\t256, r5, r5\n\tshr\tr2, r5, r2\n\tshl\tr2, r5, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB0_16:\n\tadd\t128, r4, r2\n\tst.1\tr2, r0\n\tcontext.gas_left\tr5\n\tcontext.caller\tr2\n\tsub.s!\t4, r2, r6\n\tjump.ne\t@.BB0_17\n\tptr.add\tr1, r3, r1\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_19\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_17:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.ge\tr1, r0, r5\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr1, r0, r4\n\tshl.s\t96, r4, r1\n\tshl.s\t192, r5, r3\n\tor\tr3, r1, r1\n\tor\t@CPI0_5[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand\t1, r2, r2\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n.BB0_19:\n\tsub!\tr3, r0, r4\n\tjump.ne\t@.BB0_21\n.BB0_20:\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_30\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_9[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t29, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_10[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_11[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_21:\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.ge\t@.BB0_22\n\tadd\t31, r3, r4\n\tsub.s\t32, r0, r5\n\tand\tr4, r5, r4\n\tadd\t63, r4, r4\n\tand\tr4, r5, r4\n\tld.1\t64, r5\n\tadd\tr5, r4, r4\n\tsub!\tr4, r5, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_4[0], r4, r7\n\tjump.gt\t@.BB0_22\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_22\n\tst.1\t64, r4\n\tand\t31, r3, r4\n\tst.1.inc\tr5, r3, r5\n\tshr.s!\t5, r3, r3\n\tjump.eq\t@.BB0_31\n\tadd\tr0, r0, r6\n.BB0_27:\n\tshl.s\t5, r6, r7\n\tadd\tr5, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r3, r7\n\tjump.lt\t@.BB0_27\n.BB0_31:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_20\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tr5, r3, r3\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n\tjump\t@.BB0_20\n.BB0_22:\n\tadd\t@CPI0_7[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_8[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_30:\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__farcall:\n.func_begin1:\n.tmp0:\n\tfar_call\tr1, r2, @.BB1_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB1_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end1:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_3:\n\t.cell -3586272792504325861576784142326312153395859308298442090265057199577383305216\nCPI0_4:\n\t.cell 18446744073709551615\nCPI0_5:\n\t.cell 2361183241434822606848\nCPI0_6:\n\t.cell 18446744073709551616\nCPI0_7:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_8:\n\t.cell 2852213850513516153367582212096\nCPI0_9:\n\t.cell 37268805191608899176760261474480865346391498708070210590975797293094228983808\nCPI0_10:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_11:\n\t.cell 7922816251426433759354395033600\n",
          "bytecode": {
            "object": "00010000000000020000008003000039000000400030043f000000000301001900000060033002700000002e0330019700000001022001900000004a0000c13d000000040230008c000000520000413d000000000201043b0000003002200197000000310220009c000000520000c13d0000000002000416000000240430008c000000520000413d000000000202004b000000520000c13d0000000402100370000000000202043b000000320420009c000000520000213d0000002304200039000000000434004b000000520000813d0000000405200039000000000451034f000000000404043b000000320640009c000000520000213d00000000024200190000002402200039000000000232004b000000520000213d0000002002500039000000000221034f0000001f0540018f0000000506400272000000310000613d00000000070000190000000508700210000000000982034f000000000909043b000000800880003900000000009804350000000107700039000000000867004b000000290000413d000000000705004b000000400000613d0000000506600210000000000262034f00000003055002100000008006600039000000000706043300000000075701cf000000000757022f000000000202043b0000010005500089000000000252022f00000000025201cf000000000272019f00000000002604350000008002400039000000000002043500000000050004140000000002000411000000040620008c000000540000c13d000000000131034f00000001020000390000000003000031000000630000013d0000000001000416000000000101004b000000520000c13d0000002001000039000001000010044300000120000004430000002f01000041000000b50001042e0000000001000019000000b6000104300000002e010000410000002e0350009c00000000050180190000002e0340009c00000000040180190000006001400210000000c003500210000000000113019f00000033011001c700b400af0000040f000000010220018f000000000301001900000060033002700000002e0030019d0000002e03300197000000000403004b000000790000c13d000000000102004b000000ad0000c13d000000400100043d00000044021000390000003703000041000000000032043500000024021000390000001d030000390000000000320435000000380200004100000000002104350000000402100039000000200300003900000000003204350000002e020000410000002e0310009c0000000001028019000000400110021000000039011001c7000000b600010430000000340430009c000000a70000813d0000001f04300039000000200500008a000000000454016f0000003f04400039000000000454016f000000400500043d0000000004450019000000000654004b00000000060000190000000106004039000000320740009c000000a70000213d0000000106600190000000a70000c13d000000400040043f0000001f0430018f00000000053504360000000503300272000000970000613d000000000600001900000005076002100000000008750019000000000771034f000000000707043b00000000007804350000000106600039000000000736004b0000008f0000413d000000000604004b000000650000613d0000000503300210000000000131034f00000000033500190000000304400210000000000503043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000130435000000650000013d000000350100004100000000001004350000004101000039000000040010043f0000003601000041000000b6000104300000000001000019000000b50001042e000000b2002104210000000102000039000000000001042d0000000002000019000000000001042d000000b400000432000000b50001042e000000b600010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000040000001000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000f8123dd500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000000000000000000005265656e7472616e637941747461636b3a206661696c65642063616c6c00000008c379a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000000000000000000092380e2c580fdde94d474a1be82bd9470bec6933fe789f697dfd142e1485e2c6"
          },
          "methodIdentifiers": {
            "callSender(bytes)": "f8123dd5"
          }
        },
        "irOptimized": "/// @use-src 0:\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol\", 2:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\nobject \"ReentrancyAttack_25\" {\n    code {\n        {\n            /// @src 0:106:317  \"contract ReentrancyAttack is Context {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"ReentrancyAttack_25_deployed\")\n            codecopy(_1, dataoffset(\"ReentrancyAttack_25_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol\", 2:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\n    object \"ReentrancyAttack_25_deployed\" {\n        code {\n            {\n                /// @src 0:106:317  \"contract ReentrancyAttack is Context {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    if eq(0xf8123dd5, shr(224, calldataload(0)))\n                    {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let offset := calldataload(_2)\n                        let _3 := 0xffffffffffffffff\n                        if gt(offset, _3) { revert(0, 0) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                        let length := calldataload(add(_2, offset))\n                        if gt(length, _3) { revert(0, 0) }\n                        if gt(add(add(offset, length), 36), calldatasize()) { revert(0, 0) }\n                        calldatacopy(_1, add(offset, 36), length)\n                        let _4 := add(_1, length)\n                        mstore(_4, 0)\n                        /// @src 0:226:249  \"_msgSender().call(data)\"\n                        let expr_component := call(gas(), /** @src 2:735:745  \"msg.sender\" */ caller(), /** @src 0:106:317  \"contract ReentrancyAttack is Context {...\" */ 0, /** @src 0:226:249  \"_msgSender().call(data)\" */ _1, sub(/** @src 0:106:317  \"contract ReentrancyAttack is Context {...\" */ _4, /** @src 0:226:249  \"_msgSender().call(data)\" */ _1), /** @src 0:106:317  \"contract ReentrancyAttack is Context {...\" */ 0, 0)\n                        switch returndatasize()\n                        case 0 { }\n                        default {\n                            let _5 := returndatasize()\n                            if gt(_5, _3)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(_2, 0x41)\n                                revert(0, 36)\n                            }\n                            let _6 := not(31)\n                            let memPtr := mload(64)\n                            let newFreePtr := add(memPtr, and(add(and(add(_5, 0x1f), _6), 63), _6))\n                            if or(gt(newFreePtr, _3), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(_2, 0x41)\n                                revert(0, 36)\n                            }\n                            mstore(64, newFreePtr)\n                            mstore(memPtr, _5)\n                            returndatacopy(add(memPtr, 32), 0, returndatasize())\n                        }\n                        if iszero(expr_component)\n                        {\n                            let memPtr_1 := mload(64)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, _2), 32)\n                            mstore(add(memPtr_1, 36), 29)\n                            mstore(add(memPtr_1, 68), \"ReentrancyAttack: failed call\")\n                            revert(memPtr_1, 100)\n                        }\n                        return(0, 0)\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220cd09e22c701a298db9f42001a4819adc450b28cdcc2543f69eb541c8d558229f64736f6c63430008170033\"\n    }\n}\n",
        "hash": "0100003b484d9a80dde9cc4efc8b2735d061248779dae167fc40c7d8d993063e",
        "factoryDependencies": {}
      }
    },
    "lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol": {
      "ReentrancyMock": {
        "abi": [
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [],
            "name": "ReentrancyGuardReentrantCall",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "callback",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "contract ReentrancyAttack",
                "name": "attacker",
                "type": "address"
              }
            ],
            "name": "countAndCall",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "n",
                "type": "uint256"
              }
            ],
            "name": "countLocalRecursive",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "n",
                "type": "uint256"
              }
            ],
            "name": "countThisRecursive",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "counter",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "guardedCheckEntered",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "unguardedCheckNotEntered",
            "outputs": [],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "jump_table_density_threshold": null,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ReentrancyAttack\",\"name\":\"attacker\",\"type\":\"address\"}],\"name\":\"countAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"countLocalRecursive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"countThisRecursive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardedCheckEntered\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unguardedCheckNotEntered\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol\":\"ReentrancyMock\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.8/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol\":{\"keccak256\":\"0x06694958456703a9b581f69b8fe9901224d1761f2c773730b5852f15aabb92ca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8d3b1e5fdc512f0d3f4e606b374d072b1d1658172dfecbe47096560e0abf362b\",\"dweb:/ipfs/QmWDdTu6zMEnR7vdSP4FboPxt1jeDCmY3Peb3TjdnRaJ2D\"]},\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol\":{\"keccak256\":\"0xbd24a90181e0bf797faa3d7b7cc65cbe47dc48e5672b4353bbe256e05a29a512\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c07e4d9434374bb0955100705dd23d102521c76b462c046aa450788e8d5cc784\",\"dweb:/ipfs/QmeWVDCYZoXZLbDtJumhQe3h8FVzU2qyNoruugvCA2YFYZ\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]}},\"version\":1}",
          "solc_version": "0.8.23",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.1"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"ReentrancyMock.sol:ReentrancyMock\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[3]\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r4, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_2[0], r2, r3\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r2, r3\n\tjump.gt\t@.BB0_12\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.eq\t@.BB0_42\n\tsub.s!\t@CPI0_7[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tsub.s!\t2, r1, r1\n\tjump.ne\t@.BB0_26\n\tjump\t@.BB0_21\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tsstore\tr0, r1\n\tsstore\tr1, r0\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_8[0], r2, r3\n\tjump.eq\t@.BB0_14\n\tsub.s!\t@CPI0_9[0], r2, r3\n\tjump.eq\t@.BB0_16\n\tsub.s!\t@CPI0_10[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r4, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsload\tr0, r3\n\tsub.s!\t2, r3, r3\n\tjump.eq\t@.BB0_21\n\tadd\t2, r0, r3\n\tsstore\tr0, r3\n\tsub!\tr2, r0, r3\n\tjump.eq\t@.BB0_26\n\tadd\t1, r0, r3\n\tsload\tr3, r5\n\tsub.s\t1, r0, r6\n\tsub!\tr5, r6, r6\n\tjump.eq\t@.BB0_24\n\tadd\t1, r5, r5\n\tsstore\tr3, r5\n\tadd\t@CPI0_17[0], r0, r5\n\tst.1\t160, r5\n\tsub.s\t1, r2, r2\n\tst.1\t164, r2\n\tadd\t36, r0, r2\n\tst.1\t128, r2\n\tadd\t224, r0, r2\n\tst.1\t64, r2\n\tcontext.gas_left\tr5\n\tcontext.this\tr2\n\tsub.s!\t4, r2, r6\n\tjump.ne\t@.BB0_29\n\tptr.add\tr1, r4, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_31\n.BB0_12:\n\tsub.s!\t@CPI0_4[0], r2, r3\n\tjump.eq\t@.BB0_50\n\tsub.s!\t@CPI0_5[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tsub.s!\t2, r1, r1\n\tjump.eq\t@.BB0_2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_42:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r4, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsload\tr0, r2\n\tsub.s!\t2, r2, r2\n\tjump.eq\t@.BB0_21\n\tadd\t2, r0, r2\n\tsstore\tr0, r2\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_26\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub.s\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.eq\t@.BB0_24\n\tadd\t1, r3, r3\n\tsstore\tr2, r3\n\tsub.s\t1, r1, r1\n\tnear_call\tr0, @modifier_nonReentrant, @DEFAULT_UNWIND\n\tjump\t@.BB0_26\n.BB0_14:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tnear_call\tr0, @fun_nonReentrantBefore, @DEFAULT_UNWIND\n\tnear_call\tr0, @fun_count, @DEFAULT_UNWIND\n.BB0_26:\n\tadd\t1, r0, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_50:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r4, r3\n\tjump.lt\t@.BB0_2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tand\t@CPI0_11[0], r1, r4\n\tsub.s!\t@CPI0_11[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tsload\tr0, r1\n\tsub.s!\t2, r1, r1\n\tjump.ne\t@.BB0_54\n.BB0_21:\n\tadd\t@CPI0_26[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_27[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_16:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_28[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_54:\n\tadd\t2, r0, r1\n\tsstore\tr0, r1\n\tadd\t1, r0, r3\n\tsload\tr3, r1\n\tsub.s\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.ne\t@.BB0_55\n.BB0_24:\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_55:\n\tadd\t1, r1, r1\n\tadd\tr3, r0, stack-[2]\n\tsstore\tr3, r1\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\t160, r1\n\tadd\t4, r0, r1\n\tst.1\t128, r1\n\tadd\t192, r0, r1\n\tadd\tr1, r0, stack-[1]\n\tst.1\t64, r1\n\tadd\t@CPI0_13[0], r0, r1\n\tst.2\t0, r1\n\tadd\tr4, r0, stack-[3]\n\tst.2\t4, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_14[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_56\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\tstack-[3], r0, r2\n\tjump.ne\t@.BB0_58\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_29:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.ge\tr1, r0, r5\n\tshl.s\t192, r5, r1\n\tor\t@CPI0_18[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand\t1, r2, r3\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_31:\n\tsub!\tr2, r0, r4\n\tjump.ne\t@.BB0_33\n.BB0_32:\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_26\n\tld.1\t64, r1\n\tadd\t68, r1, r2\n\tadd\t@CPI0_23[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r2\n\tadd\t27, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_24[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tadd\t32, r0, r3\n\tst.1\tr2, r3\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_25[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_56:\n\trevert\n.BB0_33:\n\tsub.s!\t@CPI0_19[0], r2, r4\n\tjump.lt\t@.BB0_35\n.BB0_34:\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_58:\n\tadd\t@CPI0_15[0], r0, r1\n\tst.1\t192, r1\n\tadd\t32, r0, r1\n\tst.1\t196, r1\n\tld.1\t128, r1\n\tst.1\t228, r1\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_61\n\tadd\tr0, r0, r5\n.BB0_60:\n\tadd\t160, r5, r3\n\tld.1\tr3, r3\n\tadd\t260, r5, r4\n\tst.1\tr4, r3\n\tadd\t32, r5, r5\n\tsub!\tr5, r1, r3\n\tjump.lt\t@.BB0_60\n.BB0_61:\n\tadd\t260, r1, r3\n\tst.1\tr3, r0\n\tcontext.gas_left\tr5\n\tsub.s!\t4, r2, r3\n\tjump.eq\t@.BB0_68\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t68, r1, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.ge\tr3, r0, r5\n\tshl.s\t192, r5, r3\n\tshl.s\t96, r1, r1\n\tor\tr3, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_63\n.BB0_68:\n\tadd\tstack-[1], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[2], r0, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_35:\n\tadd\t31, r2, r4\n\tsub.s\t32, r0, r5\n\tand\tr4, r5, r4\n\tadd\t63, r4, r4\n\tand\tr4, r5, r4\n\tld.1\t64, r5\n\tadd\tr5, r4, r4\n\tsub!\tr4, r5, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_20[0], r4, r7\n\tjump.gt\t@.BB0_34\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_34\n\tst.1\t64, r4\n\tand\t31, r2, r4\n\tst.1.inc\tr5, r2, r5\n\tshr.s!\t5, r2, r2\n\tjump.eq\t@.BB0_72\n\tadd\tr0, r0, r6\n.BB0_39:\n\tshl.s\t5, r6, r7\n\tadd\tr5, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r2, r7\n\tjump.lt\t@.BB0_39\n.BB0_72:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_32\n\tshl.s\t5, r2, r2\n\tptr.add\tr1, r2, r1\n\tadd\tr5, r2, r2\n\tshl.s\t3, r4, r4\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n\tjump\t@.BB0_32\n.BB0_63:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_73\n\tadd\tr0, r0, r6\n.BB0_65:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_65\n.BB0_73:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_67\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_67:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\nmodifier_nonReentrant:\n.func_begin1:\n\tsload\tr0, r2\n\tsub.s!\t2, r2, r2\n\tjump.eq\t@.BB1_1\n\tadd\t2, r0, r2\n\tsstore\tr0, r2\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB1_6\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub.s\t1, r0, r4\n\tsub!\tr3, r4, r4\n\tjump.eq\t@.BB1_4\n\tadd\t1, r3, r3\n\tsstore\tr2, r3\n\tsub.s\t1, r1, r1\n\tnear_call\tr0, @modifier_nonReentrant, @DEFAULT_UNWIND\n.BB1_6:\n\tadd\t1, r0, r1\n\tsstore\tr0, r1\n\tret\n.BB1_1:\n\tld.1\t64, r1\n\tadd\t@CPI1_2[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI1_3[0], r0, r2\n\tsub.s!\t@CPI1_3[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI1_4[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_4:\n\tadd\t@CPI1_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nfun_nonReentrantBefore:\n.func_begin2:\n\tsload\tr0, r1\n\tsub.s!\t2, r1, r1\n\tjump.eq\t@.BB2_1\n\tadd\t2, r0, r1\n\tsstore\tr0, r1\n\tret\n.BB2_1:\n\tld.1\t64, r1\n\tadd\t@CPI2_0[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI2_1[0], r0, r2\n\tsub.s!\t@CPI2_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI2_2[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nfun_count:\n.func_begin3:\n\tadd\t1, r0, r1\n\tsload\tr1, r2\n\tsub.s\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.eq\t@.BB3_1\n\tadd\t1, r2, r2\n\tsstore\tr1, r2\n\tret\n.BB3_1:\n\tadd\t@CPI3_0[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_1[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__cxa_throw:\n.func_begin4:\n\trevert\n.func_end4:\n\n__farcall:\n.func_begin5:\n.tmp0:\n\tfar_call\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n__staticcall:\n.func_begin6:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB6_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB6_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end6:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_3:\nCPI2_1:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 2533336719\nCPI0_3:\n\t.cell 3060968842\nCPI0_4:\n\t.cell 3060968843\nCPI0_5:\n\t.cell 3469514151\nCPI0_6:\n\t.cell 2533336720\nCPI0_7:\n\t.cell 2752049938\nCPI0_8:\n\t.cell 138094386\nCPI0_9:\n\t.cell 1639719450\nCPI0_10:\n\t.cell 2354267386\nCPI0_11:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_12:\n\t.cell 3723017281592913971951707522894712467822687845824064916866499659748790501376\nCPI0_13:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_14:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_15:\n\t.cell -3586272792504325861576784142326312153395859308298442090265057199577383305216\nCPI0_16:\n\t.cell 3541774862152233910272\nCPI0_17:\n\t.cell -52321166070544046605952694659347639416560845553481490985426253111328568770560\nCPI0_18:\n\t.cell 2852213853464995205161110470656\nCPI0_19:\n\t.cell 18446744073709551616\nCPI0_20:\n\t.cell 18446744073709551615\nCPI0_21:\nCPI1_0:\nCPI3_0:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_22:\nCPI1_1:\nCPI3_1:\n\t.cell 2852213850513516153367582212096\nCPI0_23:\n\t.cell 37268805191608899176760265956809553607552651744678378895255655138371768942592\nCPI0_24:\n\t.cell 3963877391197344453575983046348115674221700746820753546331534351508065746944\nCPI0_25:\n\t.cell 7922816251426433759354395033600\nCPI0_26:\nCPI1_2:\nCPI2_0:\n\t.cell 28449210373611454402985489541711497976320196644878638971820198805980867198976\nCPI0_27:\n\t.cell 316912652418240591808998408192\nCPI0_28:\n\t.cell 2535301202817642044428229017600\nCPI1_4:\nCPI2_2:\n\t.cell 316912650057057350374175801344\n",
          "bytecode": {
            "object": ""
          },
          "methodIdentifiers": {
            "callback()": "083b2732",
            "countAndCall(address)": "b672ad8b",
            "countLocalRecursive(uint256)": "96ffa690",
            "countThisRecursive(uint256)": "8c5344fa",
            "counter()": "61bc221a",
            "guardedCheckEntered()": "a408f312",
            "unguardedCheckNotEntered()": "cecc95a7"
          }
        },
        "irOptimized": "/// @use-src 1:\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol\", 3:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\"\nobject \"ReentrancyMock_166\" {\n    code {\n        {\n            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 3:1917:1938  \"_status = NOT_ENTERED\" */ 0x00, /** @src 3:1713:1714  \"1\" */ 0x01)\n            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n            sstore(/** @src 3:1713:1714  \"1\" */ 0x01, /** @src 3:1917:1938  \"_status = NOT_ENTERED\" */ 0x00)\n            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n            let _2 := datasize(\"ReentrancyMock_166_deployed\")\n            codecopy(_1, dataoffset(\"ReentrancyMock_166_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 1:\"lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol\", 3:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\"\n    object \"ReentrancyMock_166_deployed\" {\n        code {\n            {\n                /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                let _2 := 4\n                if iszero(lt(calldatasize(), _2))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(0))\n                    case 0x083b2732 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 3:2322:2425  \"modifier nonReentrant() {...\"\n                        fun_nonReentrantBefore()\n                        /// @src 1:305:372  \"function callback() external nonReentrant {...\"\n                        fun_count()\n                        /// @src 3:1755:1756  \"2\"\n                        sstore(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0, /** @src 3:1713:1714  \"1\" */ 0x01)\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        return(0, 0)\n                    }\n                    case 0x61bc221a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _4 := sload(/** @src 1:228:250  \"uint256 public counter\" */ 1)\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        let memPos := mload(_1)\n                        mstore(memPos, _4)\n                        return(memPos, 32)\n                    }\n                    case 0x8c5344fa {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value := calldataload(_2)\n                        /// @src 3:2322:2425  \"modifier nonReentrant() {...\"\n                        fun_nonReentrantBefore()\n                        /// @src 1:613:819  \"if (n > 0) {...\"\n                        if /** @src 1:617:622  \"n > 0\" */ iszero(iszero(value))\n                        /// @src 1:613:819  \"if (n > 0) {...\"\n                        {\n                            fun_count()\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            let diff := add(value, not(0))\n                            if gt(diff, value)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(_2, 0x11)\n                                revert(0, 0x24)\n                            }\n                            /// @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\"\n                            let expr_mpos := /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ mload(_1)\n                            /// @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\"\n                            let _5 := add(expr_mpos, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 32)\n                            /// @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\"\n                            mstore(_5, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ shl(225, 0x4629a27d))\n                            /// @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\"\n                            let _6 := 36\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            mstore(/** @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\" */ add(expr_mpos, _6), /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ diff)\n                            /// @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\"\n                            mstore(expr_mpos, _6)\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            let newFreePtr := add(expr_mpos, 96)\n                            let _7 := 0xffffffffffffffff\n                            if or(gt(newFreePtr, _7), lt(newFreePtr, expr_mpos))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(_2, 0x41)\n                                revert(0, /** @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\" */ _6)\n                            }\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            mstore(_1, newFreePtr)\n                            /// @src 1:679:747  \"address(this).call(abi.encodeCall(this.countThisRecursive, (n - 1)))\"\n                            let expr_component := call(gas(), /** @src 1:687:691  \"this\" */ address(), /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0, /** @src 1:679:747  \"address(this).call(abi.encodeCall(this.countThisRecursive, (n - 1)))\" */ _5, mload(expr_mpos), /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0, 0)\n                            switch returndatasize()\n                            case 0 { }\n                            default {\n                                let _8 := returndatasize()\n                                if gt(_8, _7)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(_2, 0x41)\n                                    revert(0, /** @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\" */ _6)\n                                }\n                                let _9 := not(31)\n                                /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                                let memPtr := mload(_1)\n                                let newFreePtr_1 := add(memPtr, and(add(and(add(_8, 31), /** @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\" */ _9), /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 63), /** @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\" */ _9))\n                                /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                                if or(gt(newFreePtr_1, _7), lt(newFreePtr_1, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(_2, 0x41)\n                                    revert(0, /** @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\" */ _6)\n                                }\n                                /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                                mstore(_1, newFreePtr_1)\n                                mstore(memPtr, _8)\n                                returndatacopy(add(memPtr, 32), 0, returndatasize())\n                            }\n                            if iszero(expr_component)\n                            {\n                                let memPtr_1 := mload(_1)\n                                mstore(memPtr_1, shl(229, 4594637))\n                                mstore(add(memPtr_1, _2), 32)\n                                mstore(add(memPtr_1, /** @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\" */ _6), /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 27)\n                                mstore(add(memPtr_1, 68), \"ReentrancyMock: failed call\")\n                                revert(memPtr_1, 100)\n                            }\n                        }\n                        /// @src 3:1755:1756  \"2\"\n                        sstore(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0, 1)\n                        return(0, 0)\n                    }\n                    case 0x96ffa690 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_1 := calldataload(_2)\n                        /// @src 3:2322:2425  \"modifier nonReentrant() {...\"\n                        fun_nonReentrantBefore()\n                        /// @src 1:448:532  \"if (n > 0) {...\"\n                        if /** @src 1:452:457  \"n > 0\" */ iszero(iszero(value_1))\n                        /// @src 1:448:532  \"if (n > 0) {...\"\n                        {\n                            fun_count()\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            let diff_1 := add(value_1, not(0))\n                            if gt(diff_1, value_1)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(_2, 0x11)\n                                revert(0, 0x24)\n                            }\n                            /// @src 1:378:538  \"function countLocalRecursive(uint256 n) public nonReentrant {...\"\n                            modifier_nonReentrant(diff_1)\n                        }\n                        /// @src 3:1755:1756  \"2\"\n                        sstore(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0, /** @src 3:1713:1714  \"1\" */ 0x01)\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        return(0, 0)\n                    }\n                    case 0xa408f312 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 3:2322:2425  \"modifier nonReentrant() {...\"\n                        fun_nonReentrantBefore()\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        if iszero(/** @src 3:3212:3230  \"_status == ENTERED\" */ eq(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ sload(0), /** @src 3:1755:1756  \"2\" */ 0x02))\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        { revert(0, 0) }\n                        /// @src 3:1755:1756  \"2\"\n                        sstore(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0, /** @src 3:1713:1714  \"1\" */ 0x01)\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        return(0, 0)\n                    }\n                    case 0xb672ad8b {\n                        if callvalue() { revert(0, 0) }\n                        let _10 := 32\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_2 := calldataload(_2)\n                        let _11 := and(value_2, sub(shl(160, 1), 1))\n                        if iszero(eq(value_2, _11)) { revert(0, 0) }\n                        /// @src 3:2322:2425  \"modifier nonReentrant() {...\"\n                        fun_nonReentrantBefore()\n                        /// @src 1:831:989  \"function countAndCall(ReentrancyAttack attacker) public nonReentrant {...\"\n                        fun_count()\n                        /// @src 1:948:981  \"abi.encodeCall(this.callback, ())\"\n                        let expr_mpos_1 := /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ mload(_1)\n                        /// @src 1:948:981  \"abi.encodeCall(this.callback, ())\"\n                        mstore(add(expr_mpos_1, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 32), shl(225, 0x041d9399))\n                        /// @src 1:948:981  \"abi.encodeCall(this.callback, ())\"\n                        mstore(expr_mpos_1, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ _2)\n                        let newFreePtr_2 := add(expr_mpos_1, _1)\n                        let _12 := gt(newFreePtr_2, 0xffffffffffffffff)\n                        if or(_12, lt(newFreePtr_2, expr_mpos_1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_2, 0x41)\n                            revert(0, /** @src 1:948:981  \"abi.encodeCall(this.callback, ())\" */ 36)\n                        }\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        mstore(_1, newFreePtr_2)\n                        /// @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\"\n                        if iszero(extcodesize(_11))\n                        {\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            revert(0, 0)\n                        }\n                        /// @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\"\n                        mstore(newFreePtr_2, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ shl(224, 0xf8123dd5))\n                        mstore(/** @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\" */ add(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ expr_mpos_1, /** @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\" */ 68), /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 32)\n                        let length := mload(expr_mpos_1)\n                        mstore(add(expr_mpos_1, 100), length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, _10) }\n                        {\n                            let _13 := add(/** @src 1:948:981  \"abi.encodeCall(this.callback, ())\" */ expr_mpos_1, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ i)\n                            mstore(add(_13, 132), mload(add(_13, _10)))\n                        }\n                        mstore(add(add(expr_mpos_1, length), 132), 0)\n                        /// @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\"\n                        let _14 := call(gas(), _11, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0, /** @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\" */ newFreePtr_2, add(sub(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ add(expr_mpos_1, and(add(length, 31), /** @src 1:698:746  \"abi.encodeCall(this.countThisRecursive, (n - 1))\" */ not(31))), /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ expr_mpos_1), /** @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\" */ 68), newFreePtr_2, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0)\n                        /// @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\"\n                        if iszero(_14)\n                        {\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            let pos := mload(_1)\n                            returndatacopy(pos, 0, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 1:928:982  \"attacker.callSender(abi.encodeCall(this.callback, ()))\"\n                        if _14\n                        {\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            if _12\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(_2, 0x41)\n                                revert(0, /** @src 1:948:981  \"abi.encodeCall(this.callback, ())\" */ 36)\n                            }\n                            /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                            mstore(_1, newFreePtr_2)\n                            _3 := 0\n                        }\n                        /// @src 3:1755:1756  \"2\"\n                        sstore(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ _3, /** @src 3:1713:1714  \"1\" */ 0x01)\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        return(_3, _3)\n                    }\n                    case 0xcecc95a7 {\n                        if callvalue() { revert(_3, _3) }\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        if /** @src 3:3212:3230  \"_status == ENTERED\" */ eq(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ sload(_3), /** @src 3:1755:1756  \"2\" */ 0x02)\n                        /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                        { revert(_3, _3) }\n                        return(_3, _3)\n                    }\n                }\n                revert(0, 0)\n            }\n            /// @ast-id 229 @src 3:2322:2425  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant(var_n)\n            {\n                fun_nonReentrantBefore()\n                /// @src 1:448:532  \"if (n > 0) {...\"\n                if /** @src 1:452:457  \"n > 0\" */ iszero(iszero(var_n))\n                /// @src 1:448:532  \"if (n > 0) {...\"\n                {\n                    fun_count()\n                    /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                    let diff := add(var_n, not(0))\n                    if gt(diff, var_n)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0x24)\n                    }\n                    /// @src 1:378:538  \"function countLocalRecursive(uint256 n) public nonReentrant {...\"\n                    modifier_nonReentrant(/** @src 1:515:520  \"n - 1\" */ diff)\n                }\n                /// @src 3:1755:1756  \"2\"\n                sstore(/** @src 1:456:457  \"0\" */ 0x00, /** @src 3:1713:1714  \"1\" */ 0x01)\n            }\n            /// @ast-id 245 @src 3:2431:2738  \"function _nonReentrantBefore() private {...\"\n            function fun_nonReentrantBefore()\n            {\n                /// @src 3:2554:2640  \"if (_status == ENTERED) {...\"\n                if /** @src 3:2558:2576  \"_status == ENTERED\" */ eq(/** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ sload(/** @src 3:2558:2565  \"_status\" */ 0x00), /** @src 3:1755:1756  \"2\" */ 0x02)\n                /// @src 3:2554:2640  \"if (_status == ENTERED) {...\"\n                {\n                    /// @src 3:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                    let _1 := /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ mload(64)\n                    /// @src 3:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                    mstore(_1, shl(224, 0x3ee5aeb5))\n                    revert(_1, 4)\n                }\n                /// @src 3:1755:1756  \"2\"\n                sstore(/** @src 3:2558:2565  \"_status\" */ 0x00, /** @src 3:1755:1756  \"2\" */ 0x02)\n            }\n            /// @ast-id 144 @src 1:995:1050  \"function _count() private {...\"\n            function fun_count()\n            {\n                /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                let _1 := sload(/** @src 1:1042:1043  \"1\" */ 0x01)\n                /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                let sum := add(_1, /** @src 1:1042:1043  \"1\" */ 0x01)\n                /// @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\"\n                if gt(_1, sum)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:179:1266  \"contract ReentrancyMock is ReentrancyGuard {...\" */ 0x24)\n                }\n                /// @src 3:1755:1756  \"2\"\n                sstore(/** @src 1:1042:1043  \"1\" */ 0x01, /** @src 3:1755:1756  \"2\" */ sum)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212203d946bf094a5c89349eb45cea140553e5fb876fb6f7d7ed793ab7bd190787dd564736f6c63430008170033\"\n    }\n}\n",
        "hash": "0100008d44c6b2102c9642c548c5de3c2368cc366508c0ae89b77b30498c3e43",
        "factoryDependencies": {}
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "Context": {
        "abi": [],
        "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.8/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
      "ReentrancyGuard": {
        "abi": [
          {
            "inputs": [],
            "name": "ReentrancyGuardReentrantCall",
            "type": "error"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.8/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      }
    }
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol",
        "exportedSymbols": {
          "Context": [
            196
          ],
          "ReentrancyAttack": [
            25
          ]
        },
        "id": 26,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "33:24:0"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
            "file": "../utils/Context.sol",
            "id": 3,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 26,
            "sourceUnit": 197,
            "src": "59:45:0",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 2,
                  "name": "Context",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 196,
                  "src": "67:7:0",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 4,
                  "name": "Context",
                  "nameLocations": [
                    "135:7:0"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 196,
                  "src": "135:7:0"
                },
                "id": 5,
                "nodeType": "InheritanceSpecifier",
                "src": "135:7:0"
              }
            ],
            "canonicalName": "ReentrancyAttack",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 25,
            "linearizedBaseContracts": [
              25,
              196
            ],
            "name": "ReentrancyAttack",
            "nameLocation": "115:16:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 23,
                  "nodeType": "Block",
                  "src": "197:118:0",
                  "statements": [
                    {
                      "assignments": [
                        11,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 11,
                          "mutability": "mutable",
                          "name": "success",
                          "nameLocation": "213:7:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 23,
                          "src": "208:12:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 10,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "208:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 17,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 15,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7,
                            "src": "244:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_calldata_ptr",
                              "typeString": "bytes calldata"
                            }
                          ],
                          "expression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 12,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 178,
                              "src": "226:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 13,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "226:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 14,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "239:4:0",
                          "memberName": "call",
                          "nodeType": "MemberAccess",
                          "src": "226:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 16,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "226:23:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "207:42:0"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 19,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "267:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "hexValue": "5265656e7472616e637941747461636b3a206661696c65642063616c6c",
                            "id": 20,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "276:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_cef7d31d1ab774e44434693d4d02c9435c97f3cf18a71b3acddb2d4efa78b651",
                              "typeString": "literal_string \"ReentrancyAttack: failed call\""
                            },
                            "value": "ReentrancyAttack: failed call"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_cef7d31d1ab774e44434693d4d02c9435c97f3cf18a71b3acddb2d4efa78b651",
                              "typeString": "literal_string \"ReentrancyAttack: failed call\""
                            }
                          ],
                          "id": 18,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "259:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 21,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "259:49:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 22,
                      "nodeType": "ExpressionStatement",
                      "src": "259:49:0"
                    }
                  ]
                },
                "functionSelector": "f8123dd5",
                "id": 24,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "callSender",
                "nameLocation": "158:10:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 8,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 7,
                      "mutability": "mutable",
                      "name": "data",
                      "nameLocation": "184:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 24,
                      "src": "169:19:0",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_calldata_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 6,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "169:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "168:21:0"
                },
                "returnParameters": {
                  "id": 9,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "197:0:0"
                },
                "scope": 25,
                "src": "149:166:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              }
            ],
            "scope": 26,
            "src": "106:211:0",
            "usedErrors": [],
            "usedEvents": []
          }
        ],
        "src": "33:285:0"
      }
    },
    "lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol": {
      "id": 1,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/mocks/ReentrancyMock.sol",
        "exportedSymbols": {
          "ReentrancyAttack": [
            25
          ],
          "ReentrancyGuard": [
            265
          ],
          "ReentrancyMock": [
            166
          ]
        },
        "id": 167,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 27,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "33:24:1"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol",
            "file": "../utils/ReentrancyGuard.sol",
            "id": 29,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 167,
            "sourceUnit": 266,
            "src": "59:61:1",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 28,
                  "name": "ReentrancyGuard",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 265,
                  "src": "67:15:1",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/mocks/ReentrancyAttack.sol",
            "file": "./ReentrancyAttack.sol",
            "id": 31,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 167,
            "sourceUnit": 26,
            "src": "121:56:1",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 30,
                  "name": "ReentrancyAttack",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 25,
                  "src": "129:16:1",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 32,
                  "name": "ReentrancyGuard",
                  "nameLocations": [
                    "206:15:1"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 265,
                  "src": "206:15:1"
                },
                "id": 33,
                "nodeType": "InheritanceSpecifier",
                "src": "206:15:1"
              }
            ],
            "canonicalName": "ReentrancyMock",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 166,
            "linearizedBaseContracts": [
              166,
              265
            ],
            "name": "ReentrancyMock",
            "nameLocation": "188:14:1",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "functionSelector": "61bc221a",
                "id": 35,
                "mutability": "mutable",
                "name": "counter",
                "nameLocation": "243:7:1",
                "nodeType": "VariableDeclaration",
                "scope": 166,
                "src": "228:22:1",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 34,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "228:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "public"
              },
              {
                "body": {
                  "id": 42,
                  "nodeType": "Block",
                  "src": "271:28:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 40,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 38,
                          "name": "counter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35,
                          "src": "281:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "hexValue": "30",
                          "id": 39,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "291:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "281:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 41,
                      "nodeType": "ExpressionStatement",
                      "src": "281:11:1"
                    }
                  ]
                },
                "id": 43,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 36,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "268:2:1"
                },
                "returnParameters": {
                  "id": 37,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "271:0:1"
                },
                "scope": 166,
                "src": "257:42:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 51,
                  "nodeType": "Block",
                  "src": "347:25:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 48,
                          "name": "_count",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 144,
                          "src": "357:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 49,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "357:8:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 50,
                      "nodeType": "ExpressionStatement",
                      "src": "357:8:1"
                    }
                  ]
                },
                "functionSelector": "083b2732",
                "id": 52,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 46,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 45,
                      "name": "nonReentrant",
                      "nameLocations": [
                        "334:12:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 229,
                      "src": "334:12:1"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "334:12:1"
                  }
                ],
                "name": "callback",
                "nameLocation": "314:8:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 44,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "322:2:1"
                },
                "returnParameters": {
                  "id": 47,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "347:0:1"
                },
                "scope": 166,
                "src": "305:67:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 73,
                  "nodeType": "Block",
                  "src": "438:100:1",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 61,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 59,
                          "name": "n",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 54,
                          "src": "452:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 60,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "456:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "452:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 72,
                      "nodeType": "IfStatement",
                      "src": "448:84:1",
                      "trueBody": {
                        "id": 71,
                        "nodeType": "Block",
                        "src": "459:73:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 62,
                                "name": "_count",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 144,
                                "src": "473:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                                  "typeString": "function ()"
                                }
                              },
                              "id": 63,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "473:8:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 64,
                            "nodeType": "ExpressionStatement",
                            "src": "473:8:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 68,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 66,
                                    "name": "n",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 54,
                                    "src": "515:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "hexValue": "31",
                                    "id": 67,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "519:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "515:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 65,
                                "name": "countLocalRecursive",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 74,
                                "src": "495:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                                  "typeString": "function (uint256)"
                                }
                              },
                              "id": 69,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "495:26:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 70,
                            "nodeType": "ExpressionStatement",
                            "src": "495:26:1"
                          }
                        ]
                      }
                    }
                  ]
                },
                "functionSelector": "96ffa690",
                "id": 74,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 57,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 56,
                      "name": "nonReentrant",
                      "nameLocations": [
                        "425:12:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 229,
                      "src": "425:12:1"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "425:12:1"
                  }
                ],
                "name": "countLocalRecursive",
                "nameLocation": "387:19:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 55,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 54,
                      "mutability": "mutable",
                      "name": "n",
                      "nameLocation": "415:1:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 74,
                      "src": "407:9:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 53,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "407:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "406:11:1"
                },
                "returnParameters": {
                  "id": 58,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "438:0:1"
                },
                "scope": 166,
                "src": "378:160:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 112,
                  "nodeType": "Block",
                  "src": "603:222:1",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 83,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 81,
                          "name": "n",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 76,
                          "src": "617:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 82,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "621:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "617:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 111,
                      "nodeType": "IfStatement",
                      "src": "613:206:1",
                      "trueBody": {
                        "id": 110,
                        "nodeType": "Block",
                        "src": "624:195:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 84,
                                "name": "_count",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 144,
                                "src": "638:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                                  "typeString": "function ()"
                                }
                              },
                              "id": 85,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "638:8:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 86,
                            "nodeType": "ExpressionStatement",
                            "src": "638:8:1"
                          },
                          {
                            "assignments": [
                              88,
                              null
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 88,
                                "mutability": "mutable",
                                "name": "success",
                                "nameLocation": "666:7:1",
                                "nodeType": "VariableDeclaration",
                                "scope": 110,
                                "src": "661:12:1",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "typeName": {
                                  "id": 87,
                                  "name": "bool",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "661:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "visibility": "internal"
                              },
                              null
                            ],
                            "id": 104,
                            "initialValue": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "id": 96,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -28,
                                        "src": "713:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_ReentrancyMock_$166",
                                          "typeString": "contract ReentrancyMock"
                                        }
                                      },
                                      "id": 97,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "718:18:1",
                                      "memberName": "countThisRecursive",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 113,
                                      "src": "713:23:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                                        "typeString": "function (uint256) external"
                                      }
                                    },
                                    {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 100,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 98,
                                            "name": "n",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 76,
                                            "src": "739:1:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "hexValue": "31",
                                            "id": 99,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "743:1:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_1_by_1",
                                              "typeString": "int_const 1"
                                            },
                                            "value": "1"
                                          },
                                          "src": "739:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 101,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "738:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                                        "typeString": "function (uint256) external"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "id": 94,
                                      "name": "abi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -1,
                                      "src": "698:3:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_abi",
                                        "typeString": "abi"
                                      }
                                    },
                                    "id": 95,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberLocation": "702:10:1",
                                    "memberName": "encodeCall",
                                    "nodeType": "MemberAccess",
                                    "src": "698:14:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
                                      "typeString": "function () pure returns (bytes memory)"
                                    }
                                  },
                                  "id": 102,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "698:48:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                ],
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 91,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "687:4:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_ReentrancyMock_$166",
                                        "typeString": "contract ReentrancyMock"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_ReentrancyMock_$166",
                                        "typeString": "contract ReentrancyMock"
                                      }
                                    ],
                                    "id": 90,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "679:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 89,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "679:7:1",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 92,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "679:13:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 93,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "693:4:1",
                                "memberName": "call",
                                "nodeType": "MemberAccess",
                                "src": "679:18:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                }
                              },
                              "id": 103,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "679:68:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "tuple(bool,bytes memory)"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "660:87:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 106,
                                  "name": "success",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 88,
                                  "src": "769:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                {
                                  "hexValue": "5265656e7472616e63794d6f636b3a206661696c65642063616c6c",
                                  "id": 107,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "778:29:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_6e7df6a41596369ff81d71c1a274a01b76010e7a5848023b008a2b13b15462a6",
                                    "typeString": "literal_string \"ReentrancyMock: failed call\""
                                  },
                                  "value": "ReentrancyMock: failed call"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_6e7df6a41596369ff81d71c1a274a01b76010e7a5848023b008a2b13b15462a6",
                                    "typeString": "literal_string \"ReentrancyMock: failed call\""
                                  }
                                ],
                                "id": 105,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -18,
                                  -18
                                ],
                                "referencedDeclaration": -18,
                                "src": "761:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 108,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "761:47:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 109,
                            "nodeType": "ExpressionStatement",
                            "src": "761:47:1"
                          }
                        ]
                      }
                    }
                  ]
                },
                "functionSelector": "8c5344fa",
                "id": 113,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 79,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 78,
                      "name": "nonReentrant",
                      "nameLocations": [
                        "590:12:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 229,
                      "src": "590:12:1"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "590:12:1"
                  }
                ],
                "name": "countThisRecursive",
                "nameLocation": "553:18:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 77,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 76,
                      "mutability": "mutable",
                      "name": "n",
                      "nameLocation": "580:1:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 113,
                      "src": "572:9:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 75,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "572:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "571:11:1"
                },
                "returnParameters": {
                  "id": 80,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "603:0:1"
                },
                "scope": 166,
                "src": "544:281:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 135,
                  "nodeType": "Block",
                  "src": "900:89:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 121,
                          "name": "_count",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 144,
                          "src": "910:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 122,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "910:8:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 123,
                      "nodeType": "ExpressionStatement",
                      "src": "910:8:1"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 129,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -28,
                                  "src": "963:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ReentrancyMock_$166",
                                    "typeString": "contract ReentrancyMock"
                                  }
                                },
                                "id": 130,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "968:8:1",
                                "memberName": "callback",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 52,
                                "src": "963:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                                  "typeString": "function () external"
                                }
                              },
                              {
                                "components": [],
                                "id": 131,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "978:2:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                                  "typeString": "function () external"
                                },
                                {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              ],
                              "expression": {
                                "id": 127,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "948:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 128,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "952:10:1",
                              "memberName": "encodeCall",
                              "nodeType": "MemberAccess",
                              "src": "948:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 132,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "948:33:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 124,
                            "name": "attacker",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 116,
                            "src": "928:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ReentrancyAttack_$25",
                              "typeString": "contract ReentrancyAttack"
                            }
                          },
                          "id": 126,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "937:10:1",
                          "memberName": "callSender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 24,
                          "src": "928:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$__$",
                            "typeString": "function (bytes memory) external"
                          }
                        },
                        "id": 133,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "928:54:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 134,
                      "nodeType": "ExpressionStatement",
                      "src": "928:54:1"
                    }
                  ]
                },
                "functionSelector": "b672ad8b",
                "id": 136,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 119,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 118,
                      "name": "nonReentrant",
                      "nameLocations": [
                        "887:12:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 229,
                      "src": "887:12:1"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "887:12:1"
                  }
                ],
                "name": "countAndCall",
                "nameLocation": "840:12:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 117,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 116,
                      "mutability": "mutable",
                      "name": "attacker",
                      "nameLocation": "870:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 136,
                      "src": "853:25:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ReentrancyAttack_$25",
                        "typeString": "contract ReentrancyAttack"
                      },
                      "typeName": {
                        "id": 115,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 114,
                          "name": "ReentrancyAttack",
                          "nameLocations": [
                            "853:16:1"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 25,
                          "src": "853:16:1"
                        },
                        "referencedDeclaration": 25,
                        "src": "853:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ReentrancyAttack_$25",
                          "typeString": "contract ReentrancyAttack"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "852:27:1"
                },
                "returnParameters": {
                  "id": 120,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "900:0:1"
                },
                "scope": 166,
                "src": "831:158:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 143,
                  "nodeType": "Block",
                  "src": "1021:29:1",
                  "statements": [
                    {
                      "expression": {
                        "id": 141,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 139,
                          "name": "counter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 35,
                          "src": "1031:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "hexValue": "31",
                          "id": 140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1042:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "1031:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 142,
                      "nodeType": "ExpressionStatement",
                      "src": "1031:12:1"
                    }
                  ]
                },
                "id": 144,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_count",
                "nameLocation": "1004:6:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 137,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1010:2:1"
                },
                "returnParameters": {
                  "id": 138,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1021:0:1"
                },
                "scope": 166,
                "src": "995:55:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 154,
                  "nodeType": "Block",
                  "src": "1107:51:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 150,
                              "name": "_reentrancyGuardEntered",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 264,
                              "src": "1125:23:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                                "typeString": "function () view returns (bool)"
                              }
                            },
                            "id": 151,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1125:25:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 149,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "1117:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 152,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1117:34:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 153,
                      "nodeType": "ExpressionStatement",
                      "src": "1117:34:1"
                    }
                  ]
                },
                "functionSelector": "a408f312",
                "id": 155,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 147,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 146,
                      "name": "nonReentrant",
                      "nameLocations": [
                        "1094:12:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 229,
                      "src": "1094:12:1"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1094:12:1"
                  }
                ],
                "name": "guardedCheckEntered",
                "nameLocation": "1065:19:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 145,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1084:2:1"
                },
                "returnParameters": {
                  "id": 148,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1107:0:1"
                },
                "scope": 166,
                "src": "1056:102:1",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 164,
                  "nodeType": "Block",
                  "src": "1212:52:1",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 161,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "1230:26:1",
                            "subExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 159,
                                "name": "_reentrancyGuardEntered",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 264,
                                "src": "1231:23:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                                  "typeString": "function () view returns (bool)"
                                }
                              },
                              "id": 160,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1231:25:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 158,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "1222:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 162,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1222:35:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 163,
                      "nodeType": "ExpressionStatement",
                      "src": "1222:35:1"
                    }
                  ]
                },
                "functionSelector": "cecc95a7",
                "id": 165,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "unguardedCheckNotEntered",
                "nameLocation": "1173:24:1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 156,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1197:2:1"
                },
                "returnParameters": {
                  "id": 157,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1212:0:1"
                },
                "scope": 166,
                "src": "1164:100:1",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              }
            ],
            "scope": 167,
            "src": "179:1087:1",
            "usedErrors": [
              210
            ],
            "usedEvents": []
          }
        ],
        "src": "33:1234:1"
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "id": 2,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "exportedSymbols": {
          "Context": [
            196
          ]
        },
        "id": 197,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 168,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "101:24:2"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "canonicalName": "Context",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 169,
              "nodeType": "StructuredDocumentation",
              "src": "127:496:2",
              "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
            },
            "fullyImplemented": true,
            "id": 196,
            "linearizedBaseContracts": [
              196
            ],
            "name": "Context",
            "nameLocation": "642:7:2",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 177,
                  "nodeType": "Block",
                  "src": "718:34:2",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "id": 174,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "735:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 175,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "739:6:2",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "735:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 173,
                      "id": 176,
                      "nodeType": "Return",
                      "src": "728:17:2"
                    }
                  ]
                },
                "id": 178,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgSender",
                "nameLocation": "665:10:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 170,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "675:2:2"
                },
                "returnParameters": {
                  "id": 173,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 172,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 178,
                      "src": "709:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 171,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "709:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "708:9:2"
                },
                "scope": 196,
                "src": "656:96:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 186,
                  "nodeType": "Block",
                  "src": "825:32:2",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "id": 183,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "842:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 184,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "846:4:2",
                        "memberName": "data",
                        "nodeType": "MemberAccess",
                        "src": "842:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "functionReturnParameters": 182,
                      "id": 185,
                      "nodeType": "Return",
                      "src": "835:15:2"
                    }
                  ]
                },
                "id": 187,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgData",
                "nameLocation": "767:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 179,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "775:2:2"
                },
                "returnParameters": {
                  "id": 182,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 181,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 187,
                      "src": "809:14:2",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_calldata_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 180,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "809:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "808:16:2"
                },
                "scope": 196,
                "src": "758:99:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 194,
                  "nodeType": "Block",
                  "src": "935:25:2",
                  "statements": [
                    {
                      "expression": {
                        "hexValue": "30",
                        "id": 192,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "952:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "functionReturnParameters": 191,
                      "id": 193,
                      "nodeType": "Return",
                      "src": "945:8:2"
                    }
                  ]
                },
                "id": 195,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_contextSuffixLength",
                "nameLocation": "872:20:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 188,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "892:2:2"
                },
                "returnParameters": {
                  "id": 191,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 190,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 195,
                      "src": "926:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 189,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "926:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "925:9:2"
                },
                "scope": 196,
                "src": "863:97:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 197,
            "src": "624:338:2",
            "usedErrors": [],
            "usedEvents": []
          }
        ],
        "src": "101:862:2"
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
      "id": 3,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol",
        "exportedSymbols": {
          "ReentrancyGuard": [
            265
          ]
        },
        "id": 266,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 198,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "109:24:3"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "canonicalName": "ReentrancyGuard",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 199,
              "nodeType": "StructuredDocumentation",
              "src": "135:750:3",
              "text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
            },
            "fullyImplemented": true,
            "id": 265,
            "linearizedBaseContracts": [
              265
            ],
            "name": "ReentrancyGuard",
            "nameLocation": "904:15:3",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": true,
                "id": 202,
                "mutability": "constant",
                "name": "NOT_ENTERED",
                "nameLocation": "1699:11:3",
                "nodeType": "VariableDeclaration",
                "scope": 265,
                "src": "1674:40:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 200,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1674:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "31",
                  "id": 201,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1713:1:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                },
                "visibility": "private"
              },
              {
                "constant": true,
                "id": 205,
                "mutability": "constant",
                "name": "ENTERED",
                "nameLocation": "1745:7:3",
                "nodeType": "VariableDeclaration",
                "scope": 265,
                "src": "1720:36:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 203,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1720:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "32",
                  "id": 204,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1755:1:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_2_by_1",
                    "typeString": "int_const 2"
                  },
                  "value": "2"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 207,
                "mutability": "mutable",
                "name": "_status",
                "nameLocation": "1779:7:3",
                "nodeType": "VariableDeclaration",
                "scope": 265,
                "src": "1763:23:3",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 206,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1763:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "documentation": {
                  "id": 208,
                  "nodeType": "StructuredDocumentation",
                  "src": "1793:52:3",
                  "text": " @dev Unauthorized reentrant call."
                },
                "errorSelector": "3ee5aeb5",
                "id": 210,
                "name": "ReentrancyGuardReentrantCall",
                "nameLocation": "1856:28:3",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 209,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1884:2:3"
                },
                "src": "1850:37:3"
              },
              {
                "body": {
                  "id": 217,
                  "nodeType": "Block",
                  "src": "1907:38:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 215,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 213,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 207,
                          "src": "1917:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 214,
                          "name": "NOT_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "1927:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1917:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 216,
                      "nodeType": "ExpressionStatement",
                      "src": "1917:21:3"
                    }
                  ]
                },
                "id": 218,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 211,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1904:2:3"
                },
                "returnParameters": {
                  "id": 212,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1907:0:3"
                },
                "scope": 265,
                "src": "1893:52:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 228,
                  "nodeType": "Block",
                  "src": "2346:79:3",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 221,
                          "name": "_nonReentrantBefore",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 245,
                          "src": "2356:19:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 222,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2356:21:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 223,
                      "nodeType": "ExpressionStatement",
                      "src": "2356:21:3"
                    },
                    {
                      "id": 224,
                      "nodeType": "PlaceholderStatement",
                      "src": "2387:1:3"
                    },
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 225,
                          "name": "_nonReentrantAfter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 253,
                          "src": "2398:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2398:20:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 227,
                      "nodeType": "ExpressionStatement",
                      "src": "2398:20:3"
                    }
                  ]
                },
                "documentation": {
                  "id": 219,
                  "nodeType": "StructuredDocumentation",
                  "src": "1951:366:3",
                  "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
                },
                "id": 229,
                "name": "nonReentrant",
                "nameLocation": "2331:12:3",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 220,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2343:2:3"
                },
                "src": "2322:103:3",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 244,
                  "nodeType": "Block",
                  "src": "2470:268:3",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 234,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 232,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 207,
                          "src": "2558:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 233,
                          "name": "ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "2569:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2558:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 239,
                      "nodeType": "IfStatement",
                      "src": "2554:86:3",
                      "trueBody": {
                        "id": 238,
                        "nodeType": "Block",
                        "src": "2578:62:3",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 235,
                                "name": "ReentrancyGuardReentrantCall",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 210,
                                "src": "2599:28:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 236,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2599:30:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 237,
                            "nodeType": "RevertStatement",
                            "src": "2592:37:3"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "id": 242,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 240,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 207,
                          "src": "2714:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 241,
                          "name": "ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "2724:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2714:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 243,
                      "nodeType": "ExpressionStatement",
                      "src": "2714:17:3"
                    }
                  ]
                },
                "id": 245,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_nonReentrantBefore",
                "nameLocation": "2440:19:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 230,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2459:2:3"
                },
                "returnParameters": {
                  "id": 231,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2470:0:3"
                },
                "scope": 265,
                "src": "2431:307:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 252,
                  "nodeType": "Block",
                  "src": "2782:170:3",
                  "statements": [
                    {
                      "expression": {
                        "id": 250,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 248,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 207,
                          "src": "2924:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 249,
                          "name": "NOT_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 202,
                          "src": "2934:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2924:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 251,
                      "nodeType": "ExpressionStatement",
                      "src": "2924:21:3"
                    }
                  ]
                },
                "id": 253,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_nonReentrantAfter",
                "nameLocation": "2753:18:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 246,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2771:2:3"
                },
                "returnParameters": {
                  "id": 247,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2782:0:3"
                },
                "scope": 265,
                "src": "2744:208:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 263,
                  "nodeType": "Block",
                  "src": "3195:42:3",
                  "statements": [
                    {
                      "expression": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 259,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 207,
                          "src": "3212:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 260,
                          "name": "ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 205,
                          "src": "3223:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3212:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 258,
                      "id": 262,
                      "nodeType": "Return",
                      "src": "3205:25:3"
                    }
                  ]
                },
                "documentation": {
                  "id": 254,
                  "nodeType": "StructuredDocumentation",
                  "src": "2958:168:3",
                  "text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
                },
                "id": 264,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_reentrancyGuardEntered",
                "nameLocation": "3140:23:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 255,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3163:2:3"
                },
                "returnParameters": {
                  "id": 258,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 257,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 264,
                      "src": "3189:4:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 256,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3189:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3188:6:3"
                },
                "scope": 265,
                "src": "3131:106:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "internal"
              }
            ],
            "scope": 266,
            "src": "886:2353:3",
            "usedErrors": [
              210
            ],
            "usedEvents": []
          }
        ],
        "src": "109:3131:3"
      }
    }
  },
  "errors": [],
  "version": "0.8.23",
  "long_version": "0.8.23+commit.f704f362.Linux.g++",
  "zk_version": "1.4.1"
}